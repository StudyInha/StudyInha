# .github/workflows/main.yml

name: Deploy React App to GitHub Pages

# 워크플로우 실행 조건: main 브랜치에 push 또는 pull request가 발생했을 때
on:
  push:
    branches:
      - main # 혹은 master 브랜치를 사용한다면 master로 변경

# 환경 변수 설정 (선택 사항이지만 일관성 유지를 위해 권장)
env:
  NODE_VERSION: '18' # Node.js 버전 설정 (프로젝트에 맞게 변경 가능)

jobs:
  # 빌드 및 배포 작업을 정의
  build-and-deploy:
    # 워크플로우가 실행될 운영체제 환경 설정
    runs-on: ubuntu-latest
    
    # 작업 단계 정의
    steps:
      # 1. 저장소 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4
        # 빌드 히스토리 및 태그 포함 (gh-pages가 필요할 수 있음)
        with:
          fetch-depth: 0

      # 2. Node.js 환경 설정
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm' # npm 캐싱을 사용하여 빌드 속도 향상

      # 3. 종속성 설치 (npm install)
      - name: Install Dependencies
        run: npm install

      # 4. React 앱 빌드 (npm run build)
      # 이 단계에서 React 앱의 정적 파일이 'build' 폴더에 생성됩니다.
      - name: Build Project
        run: npm run build
        
      # 5. 빌드 결과물 캐싱 (선택 사항: 배포 속도 향상)
      # - name: Cache Build Artifacts
      #   uses: actions/cache@v4
      #   with:
      #     path: build
      #     key: ${{ runner.os }}-build-${{ github.sha }}

      # 6. GitHub Pages에 배포
      # 'gh-pages' 패키지를 사용하여 빌드된 파일을 배포합니다.
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          # GitHub 토큰: 자동으로 생성된 토큰을 사용하여 권한 부여
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # 빌드 결과물이 있는 디렉토리 (React 기본값은 'build')
          publish_dir: ./build
          # 배포할 브랜치 설정 (일반적으로 'gh-pages' 브랜치에 배포)
          publish_branch: gh-pages
          # 커밋 메시지 설정
          commit_message: Deploy to GitHub Pages [skip ci]
          
      # 7. 배포 성공 로그 출력 (선택 사항)
      - name: Deployment Success
        run: echo "Successfully deployed to GitHub Pages via gh-pages branch."
